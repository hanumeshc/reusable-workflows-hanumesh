name: Comprehensive Security Scan

on:
  workflow_call:
    inputs:
      image_name:
        description: "Name of the Docker image (e.g., alpine1)"
        required: true
        type: string
      image_tag:
        description: "Name of the Docker tage"
        required: true
        type: string
      registry:
        description: "Docker registry"
        required: true
        type: string
      repository:
        description: "Docker repository"
        required: true
        type: string
      dockerfile:
        description: "Path to the Dockerfile"
        required: true
        type: string
      rabbitmq_url:
        description: "rabbitmq_url"
        required: true
        type: string
      rabbitmq_queue:
        description: "rabbitmq_queue"
        required: true
        type: string
      rabbitmq_exchange:
        description: "rabbitmq_exchange"
        required: true
        type: string
      rabbitmq_binding_key:
        description: "rabbitmq_binding_key"
        required: true
        type: string
      context:
        description: "Build context directory"
        required: true
        type: string
        default: "."
      org:
        description: "Organization name"
        required: true
        type: string
      application_tags:
        description: "Application tags"
        required: false
        type: string
        default: "v1.0"
    secrets:
      DOCKER_PUBLIC_USERNAME:
        description: 'Docker Hub username'
        required: true
      DOCKER_PUBLIC_PASSWORD:
        description: 'Docker Hub password'
        required: true  
      RABBITMQ_USER:
        description: 'RabbitMQ user'
        required: true
      RABBITMQ_PASS:
        description: 'RabbitMQ password'
        required: true
      SNYK_API_TOKEN:
        description: "Snyk API token"
        required: true
      UPLOAD_URL:
        description: "URL to upload scan results"
        required: true
      SSD_TEAM_TOKEN:
        description: "SSD team token"
        required: true

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    steps:
      # Checkout repository code
      - name: Checkout repository code
        uses: actions/checkout@v3

      # Set up Python (for semgrep installation)
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Install Semgrep directly
      - name: Install Semgrep
        run: |
          pip install semgrep==1.50.0
          semgrep --version

      # Download SSD Scanner CLI with specific architecture
      - name: Download SSD Scanner CLI
        run: |
          curl -L -o ssd-scanner-cli https://github.com/OpsMx/ssd-scanner-cli-public/releases/download/v0.0.50-alpha21/ssd-scanner-cli-amd64
          chmod +x ssd-scanner-cli
          sudo mv ssd-scanner-cli /usr/local/bin/

      # Install other dependencies
      - name: Install additional dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc

      # Examine source code structure
      - name: Examine source code structure
        run: |
          echo "=== Repository Structure ==="
          find . -type f | grep -v "/.git/" | sort
          if [ -f ".env" ]; then
            echo ".env file found - will be scanned for secrets"
            LINES=$(wc -l < .env)
            echo ".env contains $LINES lines"
            echo "Lines potentially containing secrets: $(grep -i -E 'key|secret|password|token|credential' .env | wc -l)"
          else
            echo ".env file not found"
          fi
          echo "=== Potential config/secret files ==="
          find . -name "*.env*" -o -name "*.yaml" -o -name "*.yml" -o -name "*.conf" -o -name "*.config" -o -name "*.json" -o -name "*.properties" | grep -v "/.git/"

      # Setup Scan Environment with custom persistent directories
      - name: Setup Scan Environment
        run: |
          CUSTOM_SCAN_DIR="${GITHUB_WORKSPACE}/scan-results-dir"
          REPORT_DIR="${GITHUB_WORKSPACE}/report-dir"
          LOG_DIR="${GITHUB_WORKSPACE}/logs-dir"
          mkdir -p "$CUSTOM_SCAN_DIR" "$REPORT_DIR" "$LOG_DIR"
          chmod -R 777 "$CUSTOM_SCAN_DIR" "$REPORT_DIR" "$LOG_DIR"
          echo "CUSTOM_SCAN_DIR=$CUSTOM_SCAN_DIR" >> $GITHUB_ENV
          echo "DEFAULT_SCAN_DIR=/home/runner/.local/bin/ssd-scan-results" >> $GITHUB_ENV
          echo "REPORT_DIR=$REPORT_DIR" >> $GITHUB_ENV
          echo "LOG_DIR=$LOG_DIR" >> $GITHUB_ENV

      - name: Log in to Docker registry
        run: |
          echo "${{ secrets.DOCKER_PUBLIC_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_PUBLIC_USERNAME }}" --password-stdin "${{ inputs.registry }}"

      - name: Build Docker Image
        run: |
          docker build -t "${{ inputs.registry }}/hanumeshc/${{ inputs.image_name }}:${{ inputs.image_tag }}" \
          -f "${{ inputs.dockerfile }}" "${{ inputs.context }}"

      - name: Push Image to Docker hub
        run: |
          docker push "${{ inputs.registry }}/hanumeshc/${{ inputs.image_name }}:${{ inputs.image_tag }}"
          

      # Debug check - verify preserved scan directory contents
      - name: Verify scan results
        run: |
          echo "=== Verifying scan result preservation ==="
          echo "Custom scan directory contents:"
          find "${{ env.CUSTOM_SCAN_DIR }}" -type f | sort || echo "No files found in custom scan directory"
          echo "Results count: $(find "${{ env.CUSTOM_SCAN_DIR }}" -type f | wc -l)"
          echo "Default scan directory contents:"
          find "${{ env.DEFAULT_SCAN_DIR }}" -type f | sort || echo "No files found in default scan directory"
          echo "Results count: $(find "${{ env.DEFAULT_SCAN_DIR }}" -type f | wc -l)"

      # Create RabbitMQ Exchange and Queue, and Bind them
      - name: Create RabbitMQ Exchange and Queue
        run: |
          # Create the exchange
          curl -u ${{ secrets.RABBITMQ_USER }}:${{ secrets.RABBITMQ_PASS }} \
              -H "Content-Type: application/json" \
              -X PUT "${{ inputs.rabbitmq_url }}/api/exchanges/%2F/${{ inputs.rabbitmq_exchange }}" \
              -d '{"type":"direct","durable":true}'

          # Create the queue
          curl -u ${{ secrets.RABBITMQ_USER }}:${{ secrets.RABBITMQ_PASS }} \
              -H "Content-Type: application/json" \
              -X PUT "${{ inputs.rabbitmq_url }}/api/queues/%2F/${{ inputs.rabbitmq_queue }}" \
              -d '{"durable":true}'

          # Bind the queue to the exchange with the binding key
          curl -u ${{ secrets.RABBITMQ_USER }}:${{ secrets.RABBITMQ_PASS }} \
              -H "Content-Type: application/json" \
              -X POST "${{ inputs.rabbitmq_url }}/api/bindings/%2F/e/${{ inputs.rabbitmq_exchange }}/q/${{ inputs.rabbitmq_queue }}" \
              -d '{"routing_key":"${{ inputs.rabbitmq_binding_key }}"}'

      # Send Build Event to RabbitMQ
      - name: Send Build Event to RabbitMQ
        run: |
          # Get the full image with registry and tag
          FULL_IMAGE="${{ inputs.registry }}/hanumeshc/${{ inputs.image_name }}:${{ inputs.image_tag }}"
          
          # Get the image digest
          IMAGE_SHA=$(docker inspect --format='{{index .RepoDigests 0}}' "$FULL_IMAGE" | cut -d':' -f2 || echo "sha256:unknown")
          
          # Prepare message for RabbitMQ - with proper case and data types for the GitHub Actions plugin
          MESSAGE=$(jq -n \
            --arg type "com.github.build.finished" \
            --argjson data "$(jq -n \
              --arg image "$FULL_IMAGE" \
              --arg imageTag "${{ inputs.image_tag }}" \
              --arg imgsha "$IMAGE_SHA" \
              --argjson artifacts '[]' \
              --arg jobId "${{ github.workflow }}" \
              --arg buildNumber "${{ github.run_number }}" \
              --arg gitUrl "https://github.com/${{ github.repository }}" \
              --arg gitCommit "${{ github.sha }}" \
              --arg gitBranch "${{ github.ref_name }}" \
              --arg jobUrl "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
              --arg buildTime "$(date +%s%3N)" \
              --arg buildUser "${{ github.actor }}" \
              --arg organization "${{ inputs.org }}" \
              --arg workflowName "GitHub Actions Workflow" \
              --argjson applicationTags "$(echo "${{ inputs.application_tags }}" | jq -R -s 'split(",") | map(select(. != ""))')" \
              '{
                "image": $image,
                "imageTag": $imageTag,
                "imgsha": $imgsha,
                "artifacts": $artifacts,
                "jobId": $jobId,
                "buildNumber": $buildNumber,
                "gitUrl": $gitUrl,
                "gitCommit": $gitCommit,
                "gitBranch": $gitBranch,
                "jobUrl": $jobUrl,
                "buildTime": $buildTime,
                "buildUser": $buildUser,
                "organization": $organization,
                "workflowName": $workflowName,
                "applicationTags": $applicationTags
              }'
            )" \
            '{type: $type, data: $data | tostring}'
          )
          
          # Debug: Output the formatted message
          echo "Message structure:"
          echo "$MESSAGE" | jq '.'
          
          # Create payload for RabbitMQ API
          PAYLOAD=$(jq -n --arg vhost "/" \
                          --arg name "${{ inputs.rabbitmq_exchange }}" \
                          --argjson properties '{}' \
                          --arg routing_key "${{ inputs.rabbitmq_binding_key }}" \
                          --arg delivery_mode "2" \
                          --arg payload "$MESSAGE" \
                          --arg payload_encoding "string" \
                          '{vhost: $vhost, name: $name, properties: $properties, routing_key: $routing_key, delivery_mode: $delivery_mode, payload: $payload, payload_encoding: $payload_encoding}')
          
          echo "Sending message to RabbitMQ..."
          
          # Send the message to RabbitMQ
          curl -s -u ${{ secrets.RABBITMQ_USER }}:${{ secrets.RABBITMQ_PASS }} \
              -H "Content-Type: application/json" \
              -X POST "${{ inputs.rabbitmq_url }}/api/exchanges/%2F/${{ inputs.rabbitmq_exchange }}/publish" \
              --data-binary "$PAYLOAD" || { echo "Failed to send message"; exit 1; }
