name: Comprehensive Build and Push

on:
  workflow_call:
    inputs:
      image_name:
        description: "Name of the Docker image (e.g., alpine1)"
        required: true
        type: string
      image_tag:
        description: "Name of the Docker tag"
        required: true
        type: string
      registry:
        description: "Docker registry"
        required: true
        type: string
      repository:
        description: "Docker repository"
        required: true
        type: string
      dockerfile:
        description: "Path to the Dockerfile"
        required: true
        type: string
      rabbitmq_url:
        description: "rabbitmq_url"
        required: true
        type: string
      rabbitmq_queue:
        description: "rabbitmq_queue"
        required: true
        type: string
      rabbitmq_exchange:
        description: "rabbitmq_exchange"
        required: true
        type: string
      rabbitmq_binding_key:
        description: "rabbitmq_binding_key"
        required: true
        type: string
      context:
        description: "Build context directory"
        required: true
        type: string
        default: "."
      org:
        description: "Organization name"
        required: true
        type: string
      application_tags:
        description: "Application tags"
        required: false
        type: string
        default: "v1.0"
      sourceCodePath:
        description: "Path to the source code"
        required: false
        type: string
        default: ""
    secrets:
      DOCKER_PUBLIC_USERNAME:
        description: 'Docker Hub username'
        required: true
      DOCKER_PUBLIC_PASSWORD:
        description: 'Docker Hub password'
        required: true  
      RABBITMQ_USER:
        description: 'RabbitMQ user'
        required: true
      RABBITMQ_PASS:
        description: 'RabbitMQ password'
        required: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Checkout repository code
      - name: Checkout repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Fetch enough history to allow diffing with the previous commit

      - name: Log in to Docker registry
        run: |
          echo "${{ secrets.DOCKER_PUBLIC_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_PUBLIC_USERNAME }}" --password-stdin "${{ inputs.registry }}"

      - name: Build Docker Image
        run: |
          docker build -t "${{ inputs.registry }}/hanumeshc/${{ inputs.image_name }}:${{ inputs.image_tag }}" \
          -f "${{ inputs.dockerfile }}" "${{ inputs.context }}"

      - name: Push Image to Docker hub
        run: |
          docker push "${{ inputs.registry }}/hanumeshc/${{ inputs.image_name }}:${{ inputs.image_tag }}"

      - name: Pull the image to get the digest
        run: docker pull "${{ inputs.registry }}/hanumeshc/${{ inputs.image_name }}:${{ inputs.image_tag }}"

      - name: Get the image digest
        run: echo "IMAGE_SHA=$(docker inspect --format='{{index .RepoDigests 0}}' "${{ inputs.registry }}/hanumeshc/${{ inputs.image_name }}:${{ inputs.image_tag }}" | cut -d':' -f2)" >> $GITHUB_ENV

      - name: Get Repository Metadata
        run: |
          echo "Fetching repository metadata"
          VISIBILITY=$(curl -s -H "Authorization: token ${{ github.token }}" https://api.github.com/repos/${{ github.repository }} | jq -r '.visibility')
          PARENT_REPO=$(curl -s -H "Authorization: token ${{ github.token }}" https://api.github.com/repos/${{ github.repository }} | jq -r '.parent.full_name // empty')
          LICENSE_NAME=$(curl -s -H "Authorization: token ${{ github.token }}" https://api.github.com/repos/${{ github.repository }} | jq -r '.license.spdx_id // empty')
          echo "VISIBILITY=$VISIBILITY" >> $GITHUB_ENV
          echo "PARENT_REPO=$PARENT_REPO" >> $GITHUB_ENV
          echo "LICENSE_NAME=$LICENSE_NAME" >> $GITHUB_ENV

      # Create RabbitMQ Exchange and Queue, and Bind them
      - name: Create RabbitMQ Exchange and Queue
        run: |
          # Create the exchange
          curl -u ${{ secrets.RABBITMQ_USER }}:${{ secrets.RABBITMQ_PASS }} \
              -H "Content-Type: application/json" \
              -X PUT "${{ inputs.rabbitmq_url }}/api/exchanges/%2F/${{ inputs.rabbitmq_exchange }}" \
              -d '{"type":"direct","durable":true}'

          # Create the queue
          curl -u ${{ secrets.RABBITMQ_USER }}:${{ secrets.RABBITMQ_PASS }} \
              -H "Content-Type: application/json" \
              -X PUT "${{ inputs.rabbitmq_url }}/api/queues/%2F/${{ inputs.rabbitmq_queue }}" \
              -d '{"durable":true}'

          # Bind the queue to the exchange with the binding key
          curl -u ${{ secrets.RABBITMQ_USER }}:${{ secrets.RABBITMQ_PASS }} \
              -H "Content-Type: application/json" \
              -X POST "${{ inputs.rabbitmq_url }}/api/bindings/%2F/e/${{ inputs.rabbitmq_exchange }}/q/${{ inputs.rabbitmq_queue }}" \
              -d '{"routing_key":"${{ inputs.rabbitmq_binding_key }}"}'

      # Send Build Event to RabbitMQ
      - name: Send Build Event to RabbitMQ
        run: |
          # Get the full image with registry and tag
          FULL_IMAGE="${{ inputs.registry }}/hanumeshc/${{ inputs.image_name }}:${{ inputs.image_tag }}"
          
          # Current timestamp in milliseconds
          TIMESTAMP=$(date +%s000)
          
          # Process application tags properly
          TAGS_JSON=$(echo "${{ inputs.application_tags }}" | tr -d '\n' | jq -R -s 'split(",") | map(select(. != ""))')
          
          # Create inner data JSON
          INNER_DATA=$(jq -n \
            --arg image "$FULL_IMAGE" \
            --arg imageTag "${{ inputs.image_tag }}" \
            --arg imgsha "${{ env.IMAGE_SHA }}" \
            --argjson artifacts "[]" \
            --argjson artifactoryUrl "[]" \
            --arg jobId "${{ github.job }}" \
            --arg buildNumber "${{ github.run_number }}" \
            --arg gitUrl "https://github.com/${{ github.repository }}" \
            --arg gitCommit "${{ github.sha }}" \
            --arg gitBranch "${{ github.ref_name }}" \
            --arg jobUrl "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            --arg buildTime "${TIMESTAMP}" \
            --arg buildUser "${{ github.actor }}" \
            --arg diffCommits "" \
            --arg visibility "${{ env.VISIBILITY }}" \
            --arg parentRepo "${{ env.PARENT_REPO }}" \
            --arg licenseName "${{ env.LICENSE_NAME }}" \
            --arg organization "${{ inputs.org }}" \
            --arg workflowName "${{ github.workflow }}" \
            --argjson applicationTags "${TAGS_JSON}" \
            --arg sourceCodePath "${{ inputs.sourceCodePath }}" \
            --argjson helmChartData '{"chartName":"","chartVersion":"","helmRepository":""}' \
            '{
              image: $image,
              imageTag: $imageTag,
              imgsha: $imgsha,
              artifacts: $artifacts,
              artifactoryUrl: $artifactoryUrl,
              jobId: $jobId,
              buildNumber: $buildNumber,
              gitUrl: $gitUrl,
              gitCommit: $gitCommit,
              gitBranch: $gitBranch,
              jobUrl: $jobUrl,
              buildTime: $buildTime,
              buildUser: $buildUser,
              diffCommits: $diffCommits,
              visibility: $visibility,
              parentRepo: $parentRepo,
              licenseName: $licenseName,
              organization: $organization,
              workflowName: $workflowName,
              applicationTags: $applicationTags,
              sourceCodePath: $sourceCodePath,
              helmChartData: $helmChartData
            }')
          
          # Create the Event structure with the proper type
          MESSAGE=$(jq -n \
            --arg type "build_event" \
            --arg data "$INNER_DATA" \
            '{type: $type, data: $data}')
          
          # Debug: Output the formatted message
          echo "Message structure:"
          echo "$MESSAGE" | jq '.'
          
          # Create payload for RabbitMQ API
          PAYLOAD=$(jq -n --arg vhost "/" \
                        --arg name "${{ inputs.rabbitmq_exchange }}" \
                        --argjson properties '{}' \
                        --arg routing_key "${{ inputs.rabbitmq_binding_key }}" \
                        --arg delivery_mode "2" \
                        --arg payload "$MESSAGE" \
                        --arg payload_encoding "string" \
                        '{vhost: $vhost, name: $name, properties: $properties, routing_key: $routing_key, delivery_mode: $delivery_mode, payload: $payload, payload_encoding: $payload_encoding}')
          
          echo "Sending message to RabbitMQ..."
          
          # Send the message to RabbitMQ
          curl -s -u ${{ secrets.RABBITMQ_USER }}:${{ secrets.RABBITMQ_PASS }} \
              -H "Content-Type: application/json" \
              -X POST "${{ inputs.rabbitmq_url }}/api/exchanges/%2F/${{ inputs.rabbitmq_exchange }}/publish" \
              --data-binary "$PAYLOAD" || { echo "Failed to send message"; exit 1; }
          
          echo "Message sent successfully to RabbitMQ"
