name: Comprehensive Security Scan

on:
  workflow_call:
    inputs:
      image_name:
        description: "Name of the Docker image (e.g., alpine1)"
        required: true
        type: string
      image_tag:
        description: "Name of the Docker tage"
        required: true
        type: string
      registry:
        description: "Docker registry"
        required: true
        type: string
      repository:
        description: "Docker repository"
        required: true
        type: string
      dockerfile:
        description: "Path to the Dockerfile"
        required: true
        type: string
      rabbitmq_url:
        description: "rabbitmq_url"
        required: true
        type: string
      rabbitmq_queue:
        description: "rabbitmq_queue"
        required: true
        type: string
      rabbitmq_exchange:
        description: "rabbitmq_exchange"
        required: true
        type: string
      rabbitmq_binding_key:
        description: "rabbitmq_binding_key"
        required: true
        type: string
      context:
        description: "Build context directory"
        required: true
        type: string
        default: "."
      org:
        description: "Organization name"
        required: true
        type: string
      application_tags:
        description: "Application tags"
        required: false
        type: string
        default: "v1.0"
    secrets:
      DOCKER_PUBLIC_USERNAME:
        description: 'Docker Hub username'
        required: true
      DOCKER_PUBLIC_PASSWORD:
        description: 'Docker Hub password'
        required: true  
      RABBITMQ_USER:
        description: 'RabbitMQ user'
        required: true
      RABBITMQ_PASS:
        description: 'RabbitMQ password'
        required: true
      SNYK_API_TOKEN:
        description: "Snyk API token"
        required: true
      UPLOAD_URL:
        description: "URL to upload scan results"
        required: true
      SSD_TEAM_TOKEN:
        description: "SSD team token"
        required: true

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    steps:
      # Checkout repository code
      - name: Checkout repository code
        uses: actions/checkout@v3

      # Set up Python (for semgrep installation)
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Install Semgrep directly
      - name: Install Semgrep
        run: |
          pip install semgrep==1.50.0
          semgrep --version

      # Download SSD Scanner CLI with specific architecture
      - name: Download SSD Scanner CLI
        run: |
          curl -L -o ssd-scanner-cli https://github.com/OpsMx/ssd-scanner-cli-public/releases/download/v0.0.50-alpha21/ssd-scanner-cli-amd64
          chmod +x ssd-scanner-cli
          sudo mv ssd-scanner-cli /usr/local/bin/

      # Install other dependencies
      - name: Install additional dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc

      # Examine source code structure
      - name: Examine source code structure
        run: |
          echo "=== Repository Structure ==="
          find . -type f | grep -v "/.git/" | sort
          if [ -f ".env" ]; then
            echo ".env file found - will be scanned for secrets"
            LINES=$(wc -l < .env)
            echo ".env contains $LINES lines"
            echo "Lines potentially containing secrets: $(grep -i -E 'key|secret|password|token|credential' .env | wc -l)"
          else
            echo ".env file not found"
          fi
          echo "=== Potential config/secret files ==="
          find . -name "*.env*" -o -name "*.yaml" -o -name "*.yml" -o -name "*.conf" -o -name "*.config" -o -name "*.json" -o -name "*.properties" | grep -v "/.git/"

      # Setup Scan Environment with custom persistent directories
      - name: Setup Scan Environment
        run: |
          CUSTOM_SCAN_DIR="${GITHUB_WORKSPACE}/scan-results-dir"
          REPORT_DIR="${GITHUB_WORKSPACE}/report-dir"
          LOG_DIR="${GITHUB_WORKSPACE}/logs-dir"
          mkdir -p "$CUSTOM_SCAN_DIR" "$REPORT_DIR" "$LOG_DIR"
          chmod -R 777 "$CUSTOM_SCAN_DIR" "$REPORT_DIR" "$LOG_DIR"
          echo "CUSTOM_SCAN_DIR=$CUSTOM_SCAN_DIR" >> $GITHUB_ENV
          echo "DEFAULT_SCAN_DIR=/home/runner/.local/bin/ssd-scan-results" >> $GITHUB_ENV
          echo "REPORT_DIR=$REPORT_DIR" >> $GITHUB_ENV
          echo "LOG_DIR=$LOG_DIR" >> $GITHUB_ENV

      - name: Log in to Docker registry
        run: |
          echo "${{ secrets.DOCKER_PUBLIC_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_PUBLIC_USERNAME }}" --password-stdin "${{ inputs.registry }}"

      - name: Build Docker Image
        run: |
          docker build -t "${{ inputs.registry }}/hanumeshc/${{ inputs.image_name }}:${{ inputs.image_tag }}" \
          -f "${{ inputs.dockerfile }}" "${{ inputs.context }}"

      - name: Push Image to Docker hub
        run: |
          docker push "${{ inputs.registry }}/hanumeshc/${{ inputs.image_name }}:${{ inputs.image_tag }}"
          

      # Run Source Code Scans with SSD Scanner CLI
      - name: Run Source Code Scans
        env:
          UPLOAD_URL: ${{ secrets.UPLOAD_URL }}
          SSD_TEAM_TOKEN: ${{ secrets.SSD_TEAM_TOKEN }}
        run: |
          echo "=== Running SOURCE CODE scans with SSD Scanner CLI ==="
          ssd-scanner-cli \
            --scanners=trivy,openssf,semgrep \
            --trivy-scanners=codelicensescan,codesecretscan,sbom,imagelicensescan,imagesecretscan \
            --artifact-type="image" \
            --artifact-name="$IMAGE_NAME" \
            --artifact-tag="$IMAGE_TAG" \            
            --upload-url="https://march-qa.oea-dev.opsmx.net" \
            --ssd-token="${SSD_TEAM_TOKEN}" \             
            --source-code-path="$GITHUB_WORKSPACE" \           
            --repository-url="https://github.com/${{ github.repository }}" \
            --branch="${{ github.ref_name }}" \
            --build-id="${{ github.run_id }}" \
            --offline-mode=false \
            --keep-results=true \
            --debug=true > ${{ env.LOG_DIR }}/source-code-scan.log 2>&1
          echo "=== SSD Scanner CLI Log (last 100 lines) ==="
          tail -n 100 ${{ env.LOG_DIR }}/source-code-scan.log || echo "Failed to read log file"
          echo "=== Checking for scan results ==="
          if [ -d "${{ env.DEFAULT_SCAN_DIR }}" ]; then
            echo "Scan results directory exists at default location"
            echo "Contents:"
            find "${{ env.DEFAULT_SCAN_DIR }}" -type f | sort
            echo "Copying results to persistent location..."
            cp -r "${{ env.DEFAULT_SCAN_DIR }}"/* "${{ env.CUSTOM_SCAN_DIR }}/" || echo "Failed to copy scan results"
          else
            echo "Warning: Default scan results directory not found!"
            mkdir -p "${{ env.DEFAULT_SCAN_DIR }}"
           fi
           
      # Run image scan as a separate step
      - name: Run Image Scan
        run: |
          echo "=== Running IMAGE scan with SSD Scanner CLI ==="
          IMAGE_NAME="${{ inputs.image_name }}" # Using the input
          IMAGE_TAG="${{ inputs.image_tag }}"  # Using the input
          ssd-scanner-cli \
            --scanners=syft,grype,trivy \
            --trivy-scanners=sbom,imagelicensescan,imagesecretscan \
            --artifact-type="image" \
            --artifact-name="$IMAGE_NAME" \
            --artifact-tag="$IMAGE_TAG" \
            --source-code-path="$GITHUB_WORKSPACE" \
            --repository-url="https://github.com/${{ github.repository }}" \
            --branch="${{ github.ref_name }}" \
            --build-id="${{ github.run_id }}" \
            --offline-mode=true \
            --keep-results=true \
            --debug=true > ${{ env.LOG_DIR }}/image-scan.log 2>&1
          echo "=== SSD Scanner CLI Image Scan Log (last 50 lines) ==="
          tail -n 50 ${{ env.LOG_DIR }}/image-scan.log || echo "Failed to read image scan log file"
          echo "Copying image scan results to persistent location..."
          cp -r "${{ env.DEFAULT_SCAN_DIR }}"/* "${{ env.CUSTOM_SCAN_DIR }}/" || echo "Failed to copy image scan results"

      # Debug check - verify preserved scan directory contents
      - name: Verify scan results
        run: |
          echo "=== Verifying scan result preservation ==="
          echo "Custom scan directory contents:"
          find "${{ env.CUSTOM_SCAN_DIR }}" -type f | sort || echo "No files found in custom scan directory"
          echo "Results count: $(find "${{ env.CUSTOM_SCAN_DIR }}" -type f | wc -l)"
          echo "Default scan directory contents:"
          find "${{ env.DEFAULT_SCAN_DIR }}" -type f | sort || echo "No files found in default scan directory"
          echo "Results count: $(find "${{ env.DEFAULT_SCAN_DIR }}" -type f | wc -l)"

      # Step: Send Build Event to SSD
      - name: Send Build Event to SSD
        env:
          SSD_URL: ${{ secrets.UPLOAD_URL }}
        run: |
          curl --location -v "https://march-qa.oea-dev.opsmx.net/webhook/v1/ssd" \
               --header "Content-Type: application/json" \
               --data '{
                 "jobname": "${{ github.workflow }}",
                 "buildnumber": "${{ github.run_number }}",
                 "joburl": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                 "gitcommit": "${{ github.sha }}",
                 "builduser": "${{ github.actor }}",
                 "giturl": "https://github.com/${{ github.repository }}",
                 "gitbranch": "${{ github.ref_name }}",
                 "artifacts": [
                   {
                      "image": "docker.io/hanumeshc/multiartifact-alpine2:alpine2-14352083198",
                      "service": "alpine"
                  },
                  {
                      "image": "quay.io/opsmxpublic/mobsf:2024-12-00",
                      "service": "mobsf"
                  }                  
                 ]
               }'
               
      # Example: Construct RabbitMQ URL (if needed for notification)
      - name: Construct RabbitMQ URL  #<--- IF YOU NEED THIS, UNCOMMENT AND ADAPT
        run: |
          RABBITMQ_URL="amqp://${{ secrets.RABBITMQ_USER }}:${{ secrets.RABBITMQ_PASS }}@${{ inputs.rabbitmq_url }}" #<---EXAMPLE
          echo "RabbitMQ URL: $RABBITMQ_URL" #DEBUG
          echo "RABBITMQ_URL=$RABBITMQ_URL" >> $GITHUB_ENV #SET ENV VAR IF NEEDED

      # Analyze scan results (EXAMPLE USAGE of UPLOAD_URL)
      - name: Analyze scan results  #<---EXAMPLE USAGE
        if: always()
        env:
          UPLOAD_URL: ${{ secrets.UPLOAD_URL }} #Double check if needed here AND used.
        run: |
          echo "=== Analyzing Scan Results ==="
          SCAN_DIR="${{ env.CUSTOM_SCAN_DIR }}"
          CRITICAL_VIOLATIONS=0
          HIGH_VIOLATIONS=0
          SECRET_FILES=""
          ls -la $SCAN_DIR || echo "No scan directories found"
          get_latest_scan_dir() {
            ls -td "${SCAN_DIR}/$1"* 2>/dev/null | head -n1
          }
          report_finding() {
            local type=$1
            local file=$2
            local severity=$3
            local details=$4
            echo "⚠️ $type Finding"
            echo "File: $file"
            echo "Severity: $severity"
            echo "Details: $details"
            echo "---"
            if [[ "${severity^^}" == "CRITICAL" ]]; then
              echo "increment_critical" >> /tmp/critical_violations.txt
            elif [[ "${severity^^}" == "HIGH" ]]; then
              if [[ "$type" == *"Secret"* ]] || [[ "$details" == *"Key"* ]] || \
                 [[ "$details" == *"Secret"* ]] || [[ "$details" == *"Token"* ]] || \
                 [[ "$details" == *"Password"* ]] || [[ "$details" == *"Credential"* ]]; then
                echo "increment_critical" >> /tmp/critical_violations.txt
              else
                echo "increment_high" >> /tmp/high_violations.txt
              fi
            fi
            if [[ "$type" == *"Secret"* ]] || [[ "$details" == *"Key"* ]] || \
               [[ "$details" == *"Secret"* ]] || [[ "$details" == *"Token"* ]] || \
               [[ "$details" == *"Password"* ]] || [[ "$details" == *"Credential"* ]]; then
              if [[ -n "$file" && "$file" != "Unknown" ]]; then
                echo "$file" >> /tmp/secret_files.txt
              fi
            fi
          }
          touch /tmp/critical_violations.txt /tmp/high_violations.txt /tmp/secret_files.txt
          if [ ! -d "$SCAN_DIR" ]; then
            echo "❌ Scan directory not found!"
            exit 1
          fi
          SEMGREP_DIR=$(get_latest_scan_dir "semgrepScan")
          if [ -n "$SEMGREP_DIR" ]; then
            echo "Checking Semgrep findings in $SEMGREP_DIR..."
            ls -la "$SEMGREP_DIR" || echo "Failed to list Semgrep directory"
            for SEVERITY in "high" "critical"; do
              FINDINGS_FILES="${SEMGREP_DIR}/findings_*_${SEVERITY}_*_semgrep.json"
              if ls $FINDINGS_FILES 2>/dev/null 1>&2; then
                for FILE in $FINDINGS_FILES; do
                  if [ -f "$FILE" ]; then
                    echo "Processing $FILE"
                    echo "File size: $(stat -c %s "$FILE") bytes"
                    while read -r finding; do
                      if [ -n "$finding" ]; then
                        FILEPATH=$(echo "$finding" | jq -r '.location.file_path // "Unknown"')
                        RULE_NAME=$(echo "$finding" | jq -r '.rule_name // "Unknown"')
                        MESSAGE=$(echo "$finding" | jq -r '.rule_message // "Unknown"')
                        SEVERITY_UPPER="${SEVERITY^^}"
                        report_finding "SAST (Semgrep)" "$FILEPATH" "$SEVERITY_UPPER" "$MESSAGE (Rule: $RULE_NAME)"
                      fi
                    done < <(jq -c '.findings[]?' "$FILE" 2>/dev/null)
                  fi
                done
              fi
            done
          else
            echo "No Semgrep findings found."
          fi
          TRIVY_DIR=$(get_latest_scan_dir "trivyScan")
          if [ -n "$TRIVY_DIR" ]; then
            echo "Checking Trivy findings in $TRIVY_DIR..."
            ls -la "$TRIVY_DIR" || echo "Failed to list Trivy directory"
            CODE_SCAN_RESULTS="${TRIVY_DIR}/*_codeScanResult.json"
            if ls $CODE_SCAN_RESULTS 2>/dev/null 1>&2; then
              for RESULT_FILE in $CODE_SCAN_RESULTS; do
                if [ -f "$RESULT_FILE" ]; then
                  echo "Processing $RESULT_FILE for secrets"
                  if jq -e '.Results[]? | select(.Secrets != null)' "$RESULT_FILE" > /dev/null 2>&1; then
                    echo "Found secrets section in results"
                    while read -r result; do
                      if [ -n "$result" ]; then
                        TARGET=$(echo "$result" | jq -r '.Target // "Unknown"')
                        echo "Found secrets in target: $TARGET"
                        CURRENT_TARGET="$TARGET"
                        while read -r secret; do
                          if [ -n "$secret" ]; then
                            FILEPATH="$CURRENT_TARGET"
                            SEVERITY=$(echo "$secret" | jq -r '.Severity // "Unknown"')
                            TITLE=$(echo "$secret" | jq -r '.Title // "Unknown"')
                            report_finding "Secret (Trivy)" "$FILEPATH" "$SEVERITY" "$TITLE"
                          fi
                        done < <(echo "$result" | jq -c '.Secrets[]?' 2>/dev/null)
                        # Example of using UPLOAD_URL
                        echo "Uploading results to $UPLOAD_URL" #<---EXAMPLE USE OF SECRET
                        curl -X POST -H "Content-Type: application/json" -d @/tmp/scan_results.json "$UPLOAD_URL" #<---EXAMPLE

                      fi
                    done < <(jq -c '.Results[]? | select(.Secrets != null)' "$RESULT_FILE" 2>/dev/null)
                  else
                    echo "No secrets section found in results"
                  fi
                fi
              done
            else
              echo "No code scan result files found"
            fi
            LICENSE_RESULTS="${TRIVY_DIR}/*_codeLicenseScanResult.json"
            if ls $LICENSE_RESULTS 2>/dev/null 1>&2; then
              for FILE in $LICENSE_RESULTS; do
                if [ -f "$FILE" ]; then
                  echo "Processing $FILE for license violations"
                  while read -r result; do
                    if [ -n "$result" ]; then
                      if [[ $result == *"GPL"* ]] || [[ $result == *"AGPL"* ]]; then
                        FILEPATH=$(echo "$result" | jq -r '.FilePath // "Unknown"')
                        NAME=$(echo "$result" | jq -r '.Name // "Unknown"')
                        report_finding "License" "$FILEPATH" "HIGH" "Restricted license detected: $NAME"
                      fi
                      SEVERITY=$(echo "$result" | jq -r '.Severity // "Unknown"')
                      if [[ "${SEVERITY^^}" == "HIGH" ]]; then
                        FILEPATH=$(echo "$result" | jq -r '.FilePath // "Unknown"')
                        NAME=$(echo "$result" | jq -r '.Name // "Unknown"')
                        report_finding "License" "$FILEPATH" "HIGH" "Forbidden license: $NAME"
                      fi
                    fi
                  done < <(jq -c '.Results[]? | select(.Licenses != null) | .Licenses[]?' "$FILE" 2>/dev/null)
                fi
              done
            fi
          else
            echo "No Trivy findings found."
          fi
          CRITICAL_VIOLATIONS=$(cat /tmp/critical_violations.txt 2>/dev/null | wc -l || echo 0)
          HIGH_VIOLATIONS=$(cat /tmp/high_violations.txt 2>/dev/null | wc -l || echo 0)
          if [ -f "/tmp/secret_files.txt" ]; then
            SECRET_FILES=$(sort -u /tmp/secret_files.txt | tr '\n' ',' | sed 's/,$//')
          fi
          echo ""
          echo "=== Security Scan Summary ==="
          TOTAL_VIOLATIONS=$((CRITICAL_VIOLATIONS + HIGH_VIOLATIONS))
          echo "Found $TOTAL_VIOLATIONS violation(s):"
          echo "Critical Violations (including HIGH severity secrets): $CRITICAL_VIOLATIONS"
          echo "Other High Violations: $HIGH_VIOLATIONS"

